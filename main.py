import sys
import os
import pandas as pd
import sqlite3
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QVBoxLayout,
                             QHBoxLayout, QWidget, QPushButton, QComboBox,
                             QLabel, QFileDialog, QTextEdit, QTableWidget,
                             QTableWidgetItem, QMessageBox, QScrollArea)
from PyQt5.QtCore import Qt
import numpy as np
from datetime import datetime


class DataVisualizationApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.df = None
        self.db_connection = None
        self.current_table = None
        self.log_actions = []
        self.initUI()

    def initUI(self):
        self.setWindowTitle('–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ Kaggle')
        self.setGeometry(100, 100, 1400, 900)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
        self.tab1 = QWidget()
        self.setup_tab1()
        self.tabs.addTab(self.tab1, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        # –í–∫–ª–∞–¥–∫–∞ 2: –ì—Ä–∞—Ñ–∏–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        self.tab2 = QWidget()
        self.setup_tab2()
        self.tabs.addTab(self.tab2, "üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

        # –í–∫–ª–∞–¥–∫–∞ 3: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        self.tab3 = QWidget()
        self.setup_tab3()
        self.tabs.addTab(self.tab3, "üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞")

        # –í–∫–ª–∞–¥–∫–∞ 4: –õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        self.tab4 = QWidget()
        self.setup_tab4()
        self.tabs.addTab(self.tab4, "üìâ –õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")

        # –í–∫–ª–∞–¥–∫–∞ 5: –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        self.tab5 = QWidget()
        self.setup_tab5()
        self.tabs.addTab(self.tab5, "üìù –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π")

        self.setCentralWidget(self.tabs)
        self.add_log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –¥–∞—Ç–∞—Å–µ—Ç!")

    def setup_tab1(self):
        layout = QVBoxLayout()

        # –ü–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        load_layout = QHBoxLayout()
        self.load_btn = QPushButton('üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV (–≤–∞—à –¥–∞—Ç–∞—Å–µ—Ç)')
        self.load_btn.clicked.connect(self.load_csv)
        self.load_btn.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; font-weight: bold; }")
        load_layout.addWidget(self.load_btn)

        self.load_db_btn = QPushButton('üóÉÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î')
        self.load_db_btn.clicked.connect(self.load_from_db)
        load_layout.addWidget(self.load_db_btn)

        self.save_db_btn = QPushButton('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î')
        self.save_db_btn.clicked.connect(self.save_to_db)
        load_layout.addWidget(self.save_db_btn)

        self.table_combo = QComboBox()
        self.table_combo.currentTextChanged.connect(self.load_table_data)
        load_layout.addWidget(QLabel('–¢–∞–±–ª–∏—Ü–∞:'))
        load_layout.addWidget(self.table_combo)

        layout.addLayout(load_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        self.info_label = QLabel('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        self.info_label.setStyleSheet("QLabel { background-color: #f0f0f0; padding: 10px; }")
        layout.addWidget(self.info_label)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        layout.addWidget(QLabel('<b>–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>'))
        self.stats_table = QTableWidget()
        layout.addWidget(self.stats_table)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        layout.addWidget(QLabel('<b>–ü–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:</b>'))
        self.data_table = QTableWidget()
        layout.addWidget(self.data_table)

        self.tab1.setLayout(layout)

    def setup_tab2(self):
        layout = QVBoxLayout()

        controls_layout = QHBoxLayout()
        self.corr_plot_btn = QPushButton('üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
        self.corr_plot_btn.clicked.connect(self.plot_correlation)
        self.corr_plot_btn.setStyleSheet("QPushButton { background-color: #2196F3; color: white; }")
        controls_layout.addWidget(self.corr_plot_btn)

        layout.addLayout(controls_layout)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.corr_scroll = QScrollArea()
        self.corr_widget = QWidget()
        self.corr_layout = QVBoxLayout(self.corr_widget)
        self.corr_scroll.setWidget(self.corr_widget)
        self.corr_scroll.setWidgetResizable(True)
        layout.addWidget(self.corr_scroll)

        self.tab2.setLayout(layout)

    def setup_tab3(self):
        layout = QVBoxLayout()

        controls_layout = QHBoxLayout()
        self.heatmap_btn = QPushButton('üî• –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É')
        self.heatmap_btn.clicked.connect(self.plot_heatmap)
        self.heatmap_btn.setStyleSheet("QPushButton { background-color: #FF9800; color: white; }")
        controls_layout.addWidget(self.heatmap_btn)

        layout.addLayout(controls_layout)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        self.heatmap_figure = Figure(figsize=(10, 8))
        self.heatmap_canvas = FigureCanvas(self.heatmap_figure)
        layout.addWidget(self.heatmap_canvas)

        self.tab3.setLayout(layout)

    def setup_tab4(self):
        layout = QVBoxLayout()

        controls_layout = QHBoxLayout()
        controls_layout.addWidget(QLabel('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:'))
        self.column_combo = QComboBox()
        controls_layout.addWidget(self.column_combo)

        self.line_plot_btn = QPushButton('üìà –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫')
        self.line_plot_btn.clicked.connect(self.plot_line_chart)
        self.line_plot_btn.setStyleSheet("QPushButton { background-color: #9C27B0; color: white; }")
        controls_layout.addWidget(self.line_plot_btn)

        layout.addLayout(controls_layout)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        self.line_figure = Figure(figsize=(10, 6))
        self.line_canvas = FigureCanvas(self.line_figure)
        layout.addWidget(self.line_canvas)

        self.tab4.setLayout(layout)

    def setup_tab5(self):
        layout = QVBoxLayout()

        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)

        clear_btn = QPushButton('üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥')
        clear_btn.clicked.connect(self.clear_log)
        layout.addWidget(clear_btn)

        self.tab5.setLayout(layout)

    def add_log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        self.log_actions.append(log_entry)
        self.log_text.append(log_entry)

    def clear_log(self):
        self.log_text.clear()
        self.log_actions = []
        self.add_log("–õ–æ–≥ –æ—á–∏—â–µ–Ω")

    def load_csv(self):
        try:
            file_path, _ = QFileDialog.getOpenFileName(
                self,
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à CSV —Ñ–∞–π–ª –∏–∑ Kaggle',
                '',
                'CSV Files (*.csv);;All Files (*)'
            )
            if file_path:
                self.df = pd.read_csv(file_path)
                self.update_data_display()
                file_name = os.path.basename(file_path)
                self.add_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω CSV —Ñ–∞–π–ª: {file_name}")
                self.add_log(f"üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {self.df.shape[0]} —Å—Ç—Ä–æ–∫, {self.df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                QMessageBox.information(self, '–£—Å–ø–µ—Ö',
                                        f'–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n–°—Ç—Ä–æ–∫: {self.df.shape[0]}\n–°—Ç–æ–ª–±—Ü–æ–≤: {self.df.shape[1]}')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {str(e)}')
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def load_from_db(self):
        try:
            file_path, _ = QFileDialog.getOpenFileName(self, '–í—ã–±—Ä–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', '', 'SQLite Files (*.db *.sqlite)')
            if file_path:
                self.db_connection = sqlite3.connect(file_path)
                self.update_table_list()
                self.add_log(f"üóÉÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(file_path)}")
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}')

    def save_to_db(self):
        if self.df is not None:
            try:
                file_path, _ = QFileDialog.getSaveFileName(self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î', '', 'SQLite Files (*.db)')
                if file_path:
                    conn = sqlite3.connect(file_path)
                    table_name = 'dataset'
                    self.df.to_sql(table_name, conn, if_exists='replace', index=False)
                    conn.close()
                    self.add_log(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {os.path.basename(file_path)}")
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {str(e)}')

    def update_table_list(self):
        if self.db_connection:
            cursor = self.db_connection.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            self.table_combo.clear()
            for table in tables:
                self.table_combo.addItem(table[0])

    def load_table_data(self, table_name):
        if self.db_connection and table_name:
            try:
                self.df = pd.read_sql_query(f"SELECT * FROM {table_name}", self.db_connection)
                self.current_table = table_name
                self.update_data_display()
                self.add_log(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}')

    def update_data_display(self):
        if self.df is not None:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            info_text = f"üìä –î–∞–Ω–Ω—ã–µ: {self.df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {self.df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤ | "
            info_text += f"üìÖ –ß–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {len(self.df.select_dtypes(include=[np.number]).columns)} | "
            info_text += f"üî§ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {len(self.df.select_dtypes(include=['object']).columns)}"
            self.info_label.setText(info_text)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_df = self.df.describe(include='all').T
            self.stats_table.setRowCount(len(stats_df))
            self.stats_table.setColumnCount(len(stats_df.columns) + 1)
            headers = ['–°—Ç–æ–ª–±–µ—Ü'] + list(stats_df.columns)
            self.stats_table.setHorizontalHeaderLabels(headers)

            for i, (col_name, row) in enumerate(stats_df.iterrows()):
                self.stats_table.setItem(i, 0, QTableWidgetItem(str(col_name)))
                for j, value in enumerate(row):
                    self.stats_table.setItem(i, j + 1, QTableWidgetItem(str(value)))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.data_table.setRowCount(min(100, len(self.df)))
            self.data_table.setColumnCount(len(self.df.columns))
            self.data_table.setHorizontalHeaderLabels(self.df.columns.tolist())

            for i in range(min(100, len(self.df))):
                for j in range(len(self.df.columns)):
                    self.data_table.setItem(i, j, QTableWidgetItem(str(self.df.iloc[i, j])))

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
            numeric_columns = self.df.select_dtypes(include=[np.number]).columns.tolist()
            self.column_combo.clear()
            for col in numeric_columns:
                self.column_combo.addItem(col)

    def plot_correlation(self):
        if self.df is not None:
            try:
                # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                for i in reversed(range(self.corr_layout.count())):
                    widget = self.corr_layout.itemAt(i).widget()
                    if widget is not None:
                        widget.deleteLater()

                numeric_df = self.df.select_dtypes(include=[np.number])
                if len(numeric_df.columns) < 2:
                    QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏')
                    return

                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                g = sns.pairplot(numeric_df)
                g.fig.suptitle('–ü–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏', y=1.02)
                g.fig.set_size_inches(12, 10)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –≤–∏–¥–∂–µ—Ç
                figure = g.fig
                canvas = FigureCanvas(figure)
                self.corr_layout.addWidget(canvas)

                self.add_log("üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}')
                self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {str(e)}")

    def plot_heatmap(self):
        if self.df is not None:
            try:
                self.heatmap_figure.clear()
                numeric_df = self.df.select_dtypes(include=[np.number])

                if len(numeric_df.columns) < 2:
                    QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã')
                    return

                ax = self.heatmap_figure.add_subplot(111)
                correlation_matrix = numeric_df.corr()

                sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, ax=ax, fmt='.2f')
                ax.set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π')

                self.heatmap_canvas.draw()
                self.add_log("üî• –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")

            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {str(e)}')
                self.add_log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")

    def plot_line_chart(self):
        if self.df is not None and self.column_combo.currentText():
            try:
                self.line_figure.clear()
                column = self.column_combo.currentText()

                ax = self.line_figure.add_subplot(111)
                ax.plot(self.df.index, self.df[column], linewidth=2, color='blue', alpha=0.7)
                ax.set_title(f'–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {column}', fontsize=14, fontweight='bold')
                ax.set_xlabel('–ò–Ω–¥–µ–∫—Å')
                ax.set_ylabel(column)
                ax.grid(True, alpha=0.3)

                self.line_canvas.draw()
                self.add_log(f"üìâ –ü–æ—Å—Ç—Ä–æ–µ–Ω –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞: {column}")

            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}')
                self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


def main():
    app = QApplication(sys.argv)
    window = DataVisualizationApp()
    window.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()